=pod

=encoding utf8

=head2 Distribution::Common

Create an installable Distribution from common sources.

But really this serves to provide examples on how to create your own C<Distribution> classes that don't
rely on a specific file system directory layout before being installed.

=for HTML <a href="https://travis-ci.org/ugexe/Perl6-Distribution--Common"><img src="https://travis-ci.org/ugexe/Perl6-Distribution--Common.svg?branch=master"></a>
          <a href="https://ci.appveyor.com/project/ugexe/perl6-distribution-common/branch/master"><img src="https://ci.appveyor.com/api/projects/status/github/ugexe/Perl6-Distribution--Common?branch=master&passingText=Windows%20-%20OK&failingText=Windows%20-%20FAIL&pendingText=Windows%20-%20pending&svg=true"></a>

=head3 Synopsis

    use Distribution::Common::Git;
    use Distribution::Common::Tar;
    use Distribution::Common::Directory;

    # a local path with a .git folder
    my $git-dist = Distribution::Common::Git.new($path.IO, :$force);

    # a file ending in .tar.gz
    my $tar-dist = Distribution::Common::Tar.new($path.IO, :$force);

    # a plain directory like Distribution::Path for brevity
    my $dir-dist = Distribution::Common::Directory.new($path.IO, :$force);

=head3 Distribution Implementations

=head4 B<Distribution::Common::Tar>

Installable C<Distribution> from a I<.tar.gz> archive

=head4 B<Distribution::Common::Git>

Installable C<Distribution> from a local git repo. Because this is a directory it inclusion is meant to serve as
an example as C<Distribution::Common::Directory> will handle this similarly. In the future however it could
support changing branches

=head4 B<Distribution::Common::Directory>

Essentially the built-in C<Distribution::Path> but built around the C<Distribution::Common> interface

=head3 Roles

=head4 B<Distribution::Common>

The base for the various common distribution classes. Fulfills rakudo's C<Distribution> role by providing its own
IO interface requirements (C<Distribution::IO>) which do most of the actual work. It's main purpose is to fake I<IO::Handle>
methods such as I<open> and I<close> for I<IO>-like access to objects that don't need to be I<.open> before being read.

=head4 B<Distribution::IO>

Like rakudo's own C<Distribution>, but with an additional requirement, I<ls-files>, to automatically handle
the setting of C<$!meta{files}> for C<Distribution::Common>

=head4 B<Distribution::IO::Proc::Tar>

=head4 B<Distribution::IO::Proc::Git>

Extract a single file from a distribution to memory. When C<CompUnitRepository::Installation::Install.install> accesses
such files they are written directly to their install location instead of first using an intermediate temporary location

=head4 B<Distribution::IO::Directory>

Basically provides a recursive file listing and little else

=head3 Todo

=over 4

=item * C<Distribution::Common::Tar> should handle I<.tar>, not just I<.tar.gz>

=back

=cut
